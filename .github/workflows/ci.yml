name: CI/CD/K
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


jobs:
  # 1) Back : lint, PHPStan, PHPUnit
  backend:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: app
          POSTGRES_USER: app
          POSTGRES_PASSWORD: symfony
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U symfony -d symfony"
          --health-interval 10s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, intl
      - name: Install deps
        working-directory: ./dashboard-api
        run: composer install --no-progress --no-interaction --prefer-dist
      - name: PHPStan
        working-directory: ./dashboard-api
        run: vendor/bin/phpstan analyse
      - name: PHPUnit
        working-directory: ./dashboard-api
        env:
          DATABASE_URL: "postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=16&charset=utf8"
        run: vendor/bin/phpunit --fail-on-warning --testdox

  # 2) Front : lint, unit tests
  frontend:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install & Lint
        working-directory: ./dashboard-app
        run: |
          npm ci
          npm run lint
      - name: Unit tests
        working-directory: ./dashboard-app
        run: npm test -- --watch=false --browsers=ChromeHeadless

  # 3) Build & push Docker images
  docker:
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push API image
        uses: docker/build-push-action@v4
        with:
          context: ./dashboard-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dashboard-api:latest
      - name: Build & push Front image
        uses: docker/build-push-action@v4
        with:
          context: ./dashboard-app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dashboard-app:latest

  # 4) E2E Cypress
  e2e:
    runs-on: ubuntu-latest
    needs: docker
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: symfony
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: symfony
        options: >-
          --health-cmd "pg_isready -U symfony -d symfony"
          --health-interval 10s
          --health-retries 5
      api:
        image: kingsley91/dashboard-api:latest
        env:
          DATABASE_URL: "postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=16&charset=utf8"
        ports: [ '8000:9000' ]
      front:
        image: kingsley91/dashboard-app:latest
        ports: [ '4200:80' ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Cypress
        working-directory: ./dashboard-app
        run: npm ci
      - name: Run E2E Tests
        working-directory: ./dashboard-app
        run: npx cypress run --config baseUrl=http://localhost:4200
